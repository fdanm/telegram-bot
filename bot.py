import asyncio
import logging
from telethon import TelegramClient
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –î–∞–Ω–Ω—ã–µ Telegram API
API_ID = 27063381
API_HASH = 'cfc4bd37dadce32e75db8760ad9b0421'
SESSION_NAME = 'user'

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
BOT_TOKEN = '8199472815:AAHx25LNiYcHAJq0dv-yQKHmgOCK0RVA2Fg'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞ –∏ –±–æ—Ç–∞
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
chat_ids = []
interval = 60
sending_messages = False
message_to_send = ""
admin_id = None  # –¢–≤–æ–π Telegram ID –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", callback_data="add_chat")],
        [InlineKeyboardButton("üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="set_interval")],
        [InlineKeyboardButton("‚úâÔ∏è –ó–∞–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="set_message")],
        [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start")],
        [InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="stop")]
    ])

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    global admin_id
    admin_id = message.from_user.id  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω–∞
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: True)
async def handle_callbacks(callback: types.CallbackQuery):
    if callback.from_user.id != admin_id:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    data = callback.data
    if data == "add_chat":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ username (@username) –∏–ª–∏ ID —á–∞—Ç–∞:")
        state["expecting"] = "add_chat"
    elif data == "set_interval":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")
        state["expecting"] = "set_interval"
    elif data == "set_message":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
        state["expecting"] = "set_message"
    elif data == "start":
        if not chat_ids or not message_to_send:
            await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–∞—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        else:
            await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
            asyncio.create_task(start_sending())
    elif data == "stop":
        global sending_messages
        sending_messages = False
        await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏
state = {"expecting": None}

@dp.message_handler()
async def handle_user_input(message: types.Message):
    global interval, message_to_send
    if message.from_user.id != admin_id:
        return

    current = state["expecting"]
    if current == "add_chat":
        try:
            entity = await client.get_entity(message.text.strip())
            chat_ids.append(entity.id)
            await message.answer("–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
    elif current == "set_interval":
        try:
            interval = int(message.text.strip())
            await message.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} —Å–µ–∫—É–Ω–¥.")
        except:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    elif current == "set_message":
        message_to_send = message.text.strip()
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    state["expecting"] = None

# –§–æ–Ω–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
async def start_sending():
    global sending_messages
    sending_messages = True
    while sending_messages:
        for chat_id in chat_ids:
            try:
                await client.send_message(chat_id, message_to_send)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
        await asyncio.sleep(interval)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    await client.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
